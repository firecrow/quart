build.c:    QrtBlock *block = ctx->root;
build.c:    QrtBlock *block = ctx->root;
build.c:    QrtCell *start = ctx->start;
core.c:    ctx->base.class = CLASS_CTX;
core.c:    ctx->base.id = ++qrt_ctx_id;
core.c:    ctx->root = qrt_block_alloc('{', NULL);
debug.c:    QrtCell *cell = ctx->start;
debug.c:    QrtStatement *stmt = ctx->root->statement_root;
debug.c:    QrtBlock *block = ctx->root;
exec.c:    QrtBlock *block = ctx->root;
parse.c:    if(!ctx->start){
parse.c:        ctx->start = node;
parse.c:    ctx->shelf = ctl_counted_alloc(NULL, 0);
parse.c:    ctx->start = cell;
parse.c:            ctl_counted_push(ctx->shelf, p, 1);
parse.c:            if((ctx->shelf->length == 0 && is_alpha(*p)) || is_alpha_numeric(*p)){
parse.c:                ctl_counted_push(ctx->shelf, p, 1);
parse.c:            }else if(ctx->shelf->length > 0){
parse.c:                cell = make_token(ctx, ctx->shelf, cell); 
parse.c:                ctx->shelf = ctl_counted_alloc(NULL, 0);
